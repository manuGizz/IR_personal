// Generated by gencpp from file vacuum_cleaner_srv/message1.msg
// DO NOT EDIT!


#ifndef VACUUM_CLEANER_SRV_MESSAGE_MESSAGE1_H
#define VACUUM_CLEANER_SRV_MESSAGE_MESSAGE1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vacuum_cleaner_srv
{
template <class ContainerAllocator>
struct message1_
{
  typedef message1_<ContainerAllocator> Type;

  message1_()
    : ID(0)
    , roomName()
    , batteryStatus(0.0)  {
    }
  message1_(const ContainerAllocator& _alloc)
    : ID(0)
    , roomName(_alloc)
    , batteryStatus(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _ID_type;
  _ID_type ID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _roomName_type;
  _roomName_type roomName;

   typedef float _batteryStatus_type;
  _batteryStatus_type batteryStatus;





  typedef boost::shared_ptr< ::vacuum_cleaner_srv::message1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vacuum_cleaner_srv::message1_<ContainerAllocator> const> ConstPtr;

}; // struct message1_

typedef ::vacuum_cleaner_srv::message1_<std::allocator<void> > message1;

typedef boost::shared_ptr< ::vacuum_cleaner_srv::message1 > message1Ptr;
typedef boost::shared_ptr< ::vacuum_cleaner_srv::message1 const> message1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vacuum_cleaner_srv::message1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vacuum_cleaner_srv::message1_<ContainerAllocator1> & lhs, const ::vacuum_cleaner_srv::message1_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.roomName == rhs.roomName &&
    lhs.batteryStatus == rhs.batteryStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vacuum_cleaner_srv::message1_<ContainerAllocator1> & lhs, const ::vacuum_cleaner_srv::message1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vacuum_cleaner_srv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vacuum_cleaner_srv::message1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vacuum_cleaner_srv::message1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vacuum_cleaner_srv::message1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acd1e05bd975455a68392bd190d3066a";
  }

  static const char* value(const ::vacuum_cleaner_srv::message1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacd1e05bd975455aULL;
  static const uint64_t static_value2 = 0x68392bd190d3066aULL;
};

template<class ContainerAllocator>
struct DataType< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vacuum_cleaner_srv/message1";
  }

  static const char* value(const ::vacuum_cleaner_srv::message1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ID\n"
"string roomName\n"
"float32 batteryStatus\n"
;
  }

  static const char* value(const ::vacuum_cleaner_srv::message1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.roomName);
      stream.next(m.batteryStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct message1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vacuum_cleaner_srv::message1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vacuum_cleaner_srv::message1_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "roomName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.roomName);
    s << indent << "batteryStatus: ";
    Printer<float>::stream(s, indent + "  ", v.batteryStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VACUUM_CLEANER_SRV_MESSAGE_MESSAGE1_H
